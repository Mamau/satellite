// Code generated by MockGen. DO NOT EDIT.
// Source: satellite/internal/usecase/collector (interfaces: Finder)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "satellite/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockFinder is a mock of Finder interface.
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder.
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance.
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// FindCommand mocks base method.
func (m *MockFinder) FindCommand(arg0 string) entity.Runner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCommand", arg0)
	ret0, _ := ret[0].(entity.Runner)
	return ret0
}

// FindCommand indicates an expected call of FindCommand.
func (mr *MockFinderMockRecorder) FindCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCommand", reflect.TypeOf((*MockFinder)(nil).FindCommand), arg0)
}
